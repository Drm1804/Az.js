{"version":3,"sources":["az.js","az.dawg.js","az.morph.js","az.syntax.js","az.tokens.js"],"names":["Az","load","url","responseType","callback","xhr","XMLHttpRequest","open","onload","e","response","send","offset","base","EXTENSION_BIT","PRECISION_MASK","label","IS_LEAF_BIT","hasLeaf","HAS_LEAF_BIT","value","ROOT","MISSING","CP1251",0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,1027,8225,1046,8222,1047,1168,1048,1113,1049,1045,1050,1028,160,1040,1051,164,166,167,169,171,172,173,174,1053,176,177,1114,181,182,183,8221,187,1029,1056,1057,1058,8364,1112,1115,1059,1060,1030,1061,1062,1063,1116,1064,1065,1031,1066,1067,1068,1069,1070,1032,8226,1071,1072,8482,1073,8240,1118,1074,1110,8230,1075,1033,1076,1077,8211,1078,1119,1079,1042,1080,1034,1025,1081,1082,8212,1083,1169,1084,1052,1085,1035,1086,1087,1088,1089,1090,1036,1041,1091,1092,8224,1093,8470,1094,1054,1095,1096,8249,1097,1098,1044,1099,1111,1055,1100,1038,8220,1101,8250,1102,8216,1103,1043,1105,1039,1026,1106,8218,1107,8217,1108,1109,"COMMON_TYPOS","й","ц","у","к","е","н","г","ш","щ","з","х","ъ","ф","ы","в","а","п","р","о","л","д","ж","э","ё","я","ч","с","м","и","т","ь","б","ю","-","=","\\",".","DAWG","units","guide","format","this","fromArrayBuffer","data","dv","DataView","unitsLength","getUint32","guideLength","Uint32Array","Uint8Array","prototype","followByte","c","index","o","nextIndex","followString","str","i","length","code","charCodeAt","hasValue","valueIndex","find","iterateAll","results","stack","key","last","push","pop","slice","findAll","replaces","mstutter","mtypos","prefix","len","cur","typos","stutter","prefixes","possible","deepFreeze","obj","Object","propNames","getOwnPropertyNames","forEach","name","prop","freeze","words","probabilities","suffixes","grammemes","paradigms","tags","predictionSuffixes","Array","defaults","replacements","Infinity","Tag","par","pair","split","stat","parent","flex","POS","POST","toString","join","trim","matches","tag","k","call","indexOf","Word","val","paradigmIdx","formIdx","stutterCnt","typosCnt","paradigm","_base","substring","normalize","keepPOS","inflect","log","console","group","ext","norm","groupCollapsed","form","groupEnd","Morph","word","config","opts","vars","j","setDefaults","init","path","loaded","loading","tagsInt","tagsExt","dawg","json","internal","external","externalFull","list","Uint16Array","count","pos","size","subarray","Syntax","TLDs","hashtags","emails","links","protocols","www","tlds","Tokens","text","tokens","append","ch","charAt","charType","charUpper","toLocaleLowerCase","tokenType","tokenSubType","token","type","s","allUpper","subType","st","firstUpper","en","done","filter","exclude","countTokens","skipSpace","skipPunct","nextToken","moveIndex","punctAhead","prevToken","punctBehind","hasTokensAhead","hasTokensBehind"],"mappings":"AAAA,GAAAA,KACAC,KAAA,SAAAC,EAAAC,EAAAC,GACA,GAAAC,GAAA,GAAAC,eACAD,GAAAE,KAAA,MAAAL,GAAA,GACAG,EAAAF,aAAAA,EAEAE,EAAAG,OAAA,SAAAC,GACAJ,EAAAK,UACAN,GAAAA,EAAAC,EAAAK,WAIAL,EAAAM,KAAA,SCZA,WAmCA,QAAAC,GAAAC,GACA,MAAAA,IAAA,MAAAA,EAAAC,IAAA,GAAAC,EAGA,QAAAC,GAAAH,GACA,MAAAA,IAAA,IAAAI,GAAAF,EAGA,QAAAG,GAAAL,GACA,MAAA,KAAAA,EAAAM,EAAAJ,GAGA,QAAAK,GAAAP,GACA,MAAAA,IAAAI,EAAAF,EA/CA,GAAAM,GAAA,EACAC,EAAA,GACAP,EAAA,WACAI,EAAA,IACAL,EAAA,IAEAG,EAAA,GAAA,GAEAM,GAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GACAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GACAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GACAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GACAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GACAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GACAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,IAAA,IAAAC,IAAA,IAAAC,IAAA,IAAAC,IAAA,IAAAC,IAAA,IAAAC,IAAA,IAAAC,IAAA,IAAAC,IAAA,IAAAC,IAAA,IAAAC,IAAA,IAAAC,IAAA,IAAAC,IAAA,IAAAC,IAAA,IACAC,IAAA,IAAAC,IAAA,IAAAC,IAAA,IAAAC,IAAA,IAAAC,IAAA,IAAAC,IAAA,IAAAC,IAAA,IAAAC,IAAA,IAAAC,IAAA,IAAAC,IAAA,IAAAC,IAAA,IAAAC,IAAA,IAAAC,IAAA,IAAAC,IAAA,IAAAC,IAAA,IACAC,KAAA,IAAAC,KAAA,IAAAC,KAAA,IAAAC,KAAA,IAAAC,KAAA,IAAAC,KAAA,IAAAC,KAAA,IAAAC,KAAA,IAAAC,KAAA,IAAAC,KAAA,IAAAC,KAAA,IAAAC,KAAA,IAAAC,IAAA,IAAAC,KAAA,IACAC,KAAA,IAAAC,IAAA,IAAAC,IAAA,IAAAC,IAAA,IAAAC,IAAA,IAAAC,IAAA,IAAAC,IAAA,IAAAC,IAAA,IAAAC,IAAA,IAAAC,KAAA,IAAAC,IAAA,IAAAC,IAAA,IAAAC,KAAA,IAAAC,IAAA,IAAAC,IAAA,IACAC,IAAA,IAAAC,KAAA,IAAAC,IAAA,IAAAC,KAAA,IAAAC,KAAA,IAAAC,KAAA,IAAAC,KAAA,IAAAC,KAAA,IAAAC,KAAA,IAAAC,KAAA,IAAAC,KAAA,IAAAC,KAAA,IAAAC,KAAA,IAAAC,KAAA,IACAC,KAAA,IAAAC,KAAA,IAAAC,KAAA,IAAAC,KAAA,IAAAC,KAAA,IAAAC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","file":"az.min.js","sourcesContent":["var Az = {\n  load: function(url, responseType, callback) {\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', url, true);\n    xhr.responseType = responseType;\n\n    xhr.onload = function (e) {\n      if (xhr.response) {\n        callback && callback(xhr.response);\n      }\n    };\n\n    xhr.send(null);\n  }\n};","(function() {\n  var ROOT = 0,\n      MISSING = -1,\n      PRECISION_MASK = 0xFFFFFFFF,\n      HAS_LEAF_BIT = 1 << 8,\n      EXTENSION_BIT = 1 << 9,\n      OFFSET_MAX = 1 << 21,\n      IS_LEAF_BIT = 1 << 31;\n\n  var CP1251 = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10, 11: 11, 12: 12, 13: 13, 14: 14, 15: 15, 16: 16,\n    17: 17, 18: 18, 19: 19, 20: 20, 21: 21, 22: 22, 23: 23, 24: 24, 25: 25, 26: 26, 27: 27, 28: 28, 29: 29, 30: 30, 31: 31, 32: 32,\n    33: 33, 34: 34, 35: 35, 36: 36, 37: 37, 38: 38, 39: 39, 40: 40, 41: 41, 42: 42, 43: 43, 44: 44, 45: 45, 46: 46, 47: 47, 48: 48,\n    49: 49, 50: 50, 51: 51, 52: 52, 53: 53, 54: 54, 55: 55, 56: 56, 57: 57, 58: 58, 59: 59, 60: 60, 61: 61, 62: 62, 63: 63, 64: 64,\n    65: 65, 66: 66, 67: 67, 68: 68, 69: 69, 70: 70, 71: 71, 72: 72, 73: 73, 74: 74, 75: 75, 76: 76, 77: 77, 78: 78, 79: 79, 80: 80,\n    81: 81, 82: 82, 83: 83, 84: 84, 85: 85, 86: 86, 87: 87, 88: 88, 89: 89, 90: 90, 91: 91, 92: 92, 93: 93, 94: 94, 95: 95, 96: 96,\n    97: 97, 98: 98, 99: 99, 100: 100, 101: 101, 102: 102, 103: 103, 104: 104, 105: 105, 106: 106, 107: 107, 108: 108, 109: 109, 110: 110, 111: 111, 112: 112,\n    113: 113, 114: 114, 115: 115, 116: 116, 117: 117, 118: 118, 119: 119, 120: 120, 121: 121, 122: 122, 123: 123, 124: 124, 125: 125, 126: 126, 127: 127,\n    1027: 129, 8225: 135, 1046: 198, 8222: 132, 1047: 199, 1168: 165, 1048: 200, 1113: 154, 1049: 201, 1045: 197, 1050: 202, 1028: 170, 160: 160, 1040: 192,\n    1051: 203, 164: 164, 166: 166, 167: 167, 169: 169, 171: 171, 172: 172, 173: 173, 174: 174, 1053: 205, 176: 176, 177: 177, 1114: 156, 181: 181, 182: 182,\n    183: 183, 8221: 148, 187: 187, 1029: 189, 1056: 208, 1057: 209, 1058: 210, 8364: 136, 1112: 188, 1115: 158, 1059: 211, 1060: 212, 1030: 178, 1061: 213,\n    1062: 214, 1063: 215, 1116: 157, 1064: 216, 1065: 217, 1031: 175, 1066: 218, 1067: 219, 1068: 220, 1069: 221, 1070: 222, 1032: 163, 8226: 149, 1071: 223,\n    1072: 224, 8482: 153, 1073: 225, 8240: 137, 1118: 162, 1074: 226, 1110: 179, 8230: 133, 1075: 227, 1033: 138, 1076: 228, 1077: 229, 8211: 150, 1078: 230,\n    1119: 159, 1079: 231, 1042: 194, 1080: 232, 1034: 140, 1025: 168, 1081: 233, 1082: 234, 8212: 151, 1083: 235, 1169: 180, 1084: 236, 1052: 204, 1085: 237,\n    1035: 142, 1086: 238, 1087: 239, 1088: 240, 1089: 241, 1090: 242, 1036: 141, 1041: 193, 1091: 243, 1092: 244, 8224: 134, 1093: 245, 8470: 185, 1094: 246,\n    1054: 206, 1095: 247, 1096: 248, 8249: 139, 1097: 249, 1098: 250, 1044: 196, 1099: 251, 1111: 191, 1055: 207, 1100: 252, 1038: 161, 8220: 147, 1101: 253,\n    8250: 155, 1102: 254, 8216: 145, 1103: 255, 1043: 195, 1105: 184, 1039: 143, 1026: 128, 1106: 144, 8218: 130, 1107: 131, 8217: 146, 1108: 186, 1109: 190};\n\n  // Based on all common ЙЦУКЕН-keyboards (both Windows and Apple variations)\n  var COMMON_TYPOS = {\n    'й': 'ёцыф', 'ц': 'йфыву', 'у': 'цывак', 'к': 'увапе', 'е': 'капрн', 'н': 'епрог', 'г': 'нролш', 'ш': 'голдщ', 'щ': 'шлджз', 'з': 'щджэх-', 'х': 'зжэъ-', 'ъ': 'хэ-ё',\n    'ф': 'йцычяё', 'ы': 'йцувсчяф', 'в': 'цукамсчы', 'а': 'укепимсв', 'п': 'кенртима', 'р': 'енгоьтип', 'о': 'нгшлбьтр', 'л': 'гшщдюбьо', 'д': 'шщзжюбл', 'ж': 'щзхэюд', 'э': 'зхъжё',\n    'ё': 'йфяъэ', 'я': 'ёфыч', 'ч': 'яфывс', 'с': 'чывам', 'м': 'свапи', 'и': 'мапрт', 'т': 'ипроь', 'ь': 'тролб', 'б': 'ьолдю', 'ю': 'блдж',\n    '1': 'ёйц', '2': 'йцу', '3': 'цук', '4': 'уке', '5': 'кен', '6': 'енг', '7': 'нгш', '8': 'гшщ', '9': 'шщз', '0': 'щзх-', '-': 'зхъ', '=': '-хъ', '\\\\': 'ъэ', '.': 'южэ'\n  };\n\n  function offset(base) {\n    return ((base >> 10) << ((base & EXTENSION_BIT) >> 6)) & PRECISION_MASK;\n  }\n\n  function label(base) {\n    return base & (IS_LEAF_BIT | 0xFF) & PRECISION_MASK;\n  }\n\n  function hasLeaf(base) {\n    return (base & HAS_LEAF_BIT & PRECISION_MASK) != 0;\n  }\n\n  function value(base) {\n    return base & ~IS_LEAF_BIT & PRECISION_MASK;\n  }\n\n  var DAWG = Az.DAWG = function(units, guide, format) {\n    this.units = units;\n    this.guide = guide;\n    this.format = format;\n  }\n\n  DAWG.fromArrayBuffer = function(data, format) {\n    var dv = new DataView(data),\n        unitsLength = dv.getUint32(0, true),\n        guideLength = dv.getUint32(unitsLength * 4 + 4, true);\n    return new DAWG(\n      new Uint32Array(data, 4, unitsLength),\n      new Uint8Array(data, unitsLength * 4 + 8, guideLength * 2),\n      format);\n  }\n\n  DAWG.load = function(url, format, callback) {\n    Az.load(url, 'arraybuffer', function(data) {\n      callback(DAWG.fromArrayBuffer(data, format));\n    });\n  }\n\n  DAWG.prototype.followByte = function(c, index) {\n    var o = offset(this.units[index]);\n    var nextIndex = (index ^ o ^ (c & 0xFF)) & PRECISION_MASK;\n\n    if (label(this.units[nextIndex]) != (c & 0xFF)) {\n      return MISSING;\n    }\n\n    return nextIndex;\n  }\n\n  DAWG.prototype.followString = function(str, index) {\n    index = index || ROOT;\n    for (var i = 0; i < str.length; i++) {\n      var code = str.charCodeAt(i);\n      if (!(code in CP1251)) {\n        return MISSING;\n      }\n      index = this.followByte(CP1251[code], index);\n      if (index == MISSING) {\n        return MISSING;\n      }\n    }\n    return index;\n  }\n\n  DAWG.prototype.hasValue = function(index) {\n    return hasLeaf(this.units[index]);\n  }\n\n  DAWG.prototype.value = function(index) {\n    var o = offset(this.units[index]);\n    var valueIndex = (index ^ o) & PRECISION_MASK;\n    return value(this.units[valueIndex]);\n  }\n\n  DAWG.prototype.find = function(str) {\n    var index = this.followString(str);\n    if (index == MISSING) {\n        return MISSING;\n    }\n    if (!this.hasValue(index)) {\n        return MISSING;\n    }\n    return this.value(index);\n  }\n\n  DAWG.prototype.iterateAll = function(index) {\n    var results = [];\n    var stack = [index];\n    var key = [];\n    var last = ROOT;\n    var label;\n\n    while (true) {\n      index = stack[stack.length - 1];\n\n      if (last != ROOT) {\n        label = this.guide[index << 1];\n        if (label) {\n          index = this.followByte(label, index);\n          if (index == MISSING) {\n            return results;\n          }\n          key.push(label);\n          stack.push(index);\n        } else {\n          do {\n            label = this.guide[(index << 1) + 1];\n            key.pop();\n            stack.pop();\n            if (!stack.length) {\n              return results;\n            }\n            index = stack[stack.length - 1];\n            if (label) {\n              index = this.followByte(label, index);\n              if (index == MISSING) {\n                return results;\n              }\n              key.push(label);\n              stack.push(index);\n            }\n          } while (!label);\n        }\n      }\n\n      while (!this.hasValue(index)) {\n        var label = this.guide[index << 1];\n        index = this.followByte(label, index);\n        if (index == MISSING) {\n          return results;\n        }\n        key.push(label);\n        stack.push(index);\n      }\n\n      // Only three formats supported\n      if (this.format == 'words') {\n        results.push([\n          ((key[0] ^ 1) << 6) + (key[1] >> 1),\n          ((key[2] ^ 1) << 6) + (key[3] >> 1)\n        ]);\n      } else\n      if (this.format == 'probs') {\n        results.push([\n          ((key[0] ^ 1) << 6) + (key[1] >> 1),\n          ((key[2] ^ 1) << 6) + (key[3] >> 1),\n          ((key[4] ^ 1) << 6) + (key[5] >> 1)\n        ]);\n      } else {\n        // Raw bytes\n        results.push(key.slice());\n      }\n      last = index;\n    }\n  }\n\n  // Features:\n  //  replaces (е -> ё) (DONE)\n  //  stutter (ннет -> нет, гоол -> гол, д-да -> да)\n  //  typos (count-limited):\n  //    swaps (солво -> слово)\n  //    extra letters (свлово -> слово)\n  //    missing letters (сово -> слово)\n  //    wrong letters (сково -> слово)\n  DAWG.prototype.findAll = function(str, replaces, mstutter, mtypos) {\n    mtypos = mtypos || 0;\n    mstutter = mstutter || 0;\n    var results = [],\n        prefixes = [['', 0, 0, 0, ROOT]],\n        prefix, index, len, code, cur, typos, stutter;\n\n    while (prefixes.length) {\n      prefix = prefixes.pop();\n      index = prefix[4], stutter = prefix[3], typos = prefix[2], len = prefix[1], prefix = prefix[0];\n\n      // Done\n      if (len == str.length) {\n        if (this.format == 'int') {\n          if (this.hasValue(index)) {\n            results.push([prefix, this.value(index)]);\n          }\n          continue;\n        }\n        // Find all payloads\n        if (this.format == 'words' || this.format == 'probs') {\n          index = this.followByte(1, index); // separator\n          if (index == MISSING) {\n            continue;\n          }\n        }\n        results.push([prefix, this.iterateAll(index), stutter, typos]);\n        continue;\n      }\n\n      // Follow a replacement path\n      if (replaces && str[len] in replaces) {\n        code = replaces[str[len]].charCodeAt(0);\n        if (code in CP1251) {\n          cur = this.followByte(CP1251[code], index);\n          if (cur != MISSING) {\n            prefixes.push([ prefix + replaces[str[len]], len + 1, typos, stutter, cur ]);\n          }\n        }\n      }\n\n      // Follow typos path (if not over limit)\n      if (typos < mtypos && !stutter) {\n        // Skip a letter entirely (extra letter)\n        prefixes.push([ prefix, len + 1, typos + 1, stutter, index ]);\n\n        // Add a letter (missing) - or - replace a letter\n        // TODO: iterate all childs?\n        // Now it checks only most probable typos (located near to each other on keyboards)\n        var possible = COMMON_TYPOS[str[len]];\n        if (possible) {\n          for (var i = 0; i < possible.length; i++) {\n            code = possible.charCodeAt(i);\n            if (code in CP1251) {\n              cur = this.followByte(CP1251[code], index);\n              if (cur != MISSING) {\n                // for missing letter we need to iterate all childs, not only COMMON_TYPOS\n                // prefixes.push([ prefix + possible[i], len, typos + 1, stutter, cur ]);\n                prefixes.push([ prefix + possible[i], len + 1, typos + 1, stutter, cur ]);\n              }\n            }\n          }\n        }\n\n        // Swapped two letters\n        // TODO: support for replacements?\n        if (len < str.length - 1) {\n          code = str.charCodeAt(len + 1);\n          if (code in CP1251) {\n            cur = this.followByte(CP1251[code], index);\n            if (cur != MISSING) {\n              code = str.charCodeAt(len);\n              if (code in CP1251) {\n                cur = this.followByte(CP1251[code], cur);\n                if (cur != MISSING) {\n                  prefixes.push([ prefix + str[len + 1] + str[len], len + 2, typos + 1, stutter, cur ]);\n                }\n              }\n            }\n          }\n        }\n      }\n\n      // Follow base path\n      code = str.charCodeAt(len);\n      if (code in CP1251) {\n        cur = this.followByte(CP1251[code], index);\n        if (cur != MISSING) {\n          prefixes.push([ prefix + str[len], len + 1, typos, stutter, cur ]);\n\n          while (stutter < mstutter && !typos && len < str.length - 1) {\n            // Follow a simple stutter path (merge two equal letters into one)\n            if (str[len] == str[len + 1]) {\n              prefixes.push([ prefix + str[len], len + 2, typos, stutter + 1, cur ]);\n              len++;\n            } else\n            // Follow a stutter with a dash (д-да)\n            if (len < str.length - 2 && str[len + 1] == '-' && str[len] == str[len + 2]) {\n              prefixes.push([ prefix + str[len], len + 3, typos, stutter + 1, cur ]);\n              len += 2;\n            } else {\n              break;\n            }\n            stutter++;\n          }\n        }\n      }\n    }\n    return results;\n  }\n})();","(function() {\n  var words,\n      probabilities,\n      predictionSuffixes = new Array(3),\n      prefixes = [ '', 'по', 'наи' ],\n      suffixes,\n      grammemes,\n      paradigms,\n      tags,\n      defaults = {\n        // Замены (работают как в pymorphy2).\n        // false, чтобы отключить.\n        replacements: { 'е': 'ё' },\n        // \"Заикание\". Устраняет повторения букв (как с дефисом - \"не-е-ет\", так и без - \"нееет\").\n        // Infinity не ограничивает максимальное число повторений (суммарно во всем слове).\n        // 0 или false чтобы отключить.\n        stutter: Infinity,\n        // Опечатки. Максимальное количество опечаток в слове.\n        // Опечаткой считается:\n        // - лишняя буква в слове\n        // - (пропущенная буква в слове) (TODO: пока не работает)\n        // - не та буква в слове (если правильная буква стоит рядом на клавиатуре)\n        // - переставленные местами соседние буквы\n        // 0 или false чтобы отключить.\n        // 'auto':\n        // - 0, если слово короче 5 букв\n        // - 1, если слово короче 10 букв (но только если не нашлось варианта разбора без опечаток)\n        // - 2 в противном случае (но только если не нашлось варианта разбора без опечаток или с 1 опечаткой)\n        typos: 0\n        // Совместное появление опечаток и \"заикания\" считается недопустимым (т.к. это приводит к большому числу вариантов, особенно на словах с \"заиканием\")\n      };\n\n  // Взято из https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\n  function deepFreeze(obj) {\n    if (!('freeze' in Object)) {\n      return;\n    }\n\n    var propNames = Object.getOwnPropertyNames(obj);\n    propNames.forEach(function(name) {\n      var prop = obj[name];\n\n      if (typeof prop == 'object' && prop !== null)\n        deepFreeze(prop);\n    });\n\n    return Object.freeze(obj);\n  }\n\n  //\n  // Экземпляры Tag могут быть довольно большими, т.к. будут переиспользоваться для всех слов.\n  // Однако это приводит к запрету на любые изменения этих экземпляров. В современных браузерах для этого будет использован метод Object.freeze()\n  // Каждая граммема хранится внутри тега в нескольких местах:\n  //   tag[grammeme] = true | false\n  //   tag[parent] = grammeme\n  //   tag.stat = [grammeme1, grammeme2, ...] // неизменяемые граммемы\n  //   tag.flex = [grammeme1, grammeme2, ...] // изменяемые граммемы\n  //\n  //\n  //   tag.ext[grammemeCyr] = true | false\n  //   tag.ext[parentCyr] = grammemeCyr\n  //   tag.ext.stat = [grammemeCyr1, grammemeCyr2, ...] // неизменяемые граммемы\n  //   tag.ext.flex = [grammemeCyr1, grammemeCyr2, ...] // изменяемые граммемы\n  //\n  //\n  //   Тут grammeme - латинская запись граммемы, grammemeCyr - кириллическая\n  //   parent, parentCyr - родительская граммема.\n  //\n  var Tag = function(str) {\n    var par, pair = str.split(' ');\n    this.stat = pair[0].split(',');\n    for (var i = 0; i < this.stat.length; i++) {\n      this[this.stat[i]] = true;\n      if (par = grammemes[this.stat[i]].parent) {\n        this[par] = this.stat[i];\n      }\n    }\n    this.flex = pair[1] ? pair[1].split(',') : [];\n    for (var i = 0; i < this.flex.length; i++) {\n      this[this.flex[i]] = true;\n      if (par = grammemes[this.flex[i]].parent) {\n        this[par] = this.flex[i];\n      }\n    }\n    if ('POST' in this) {\n      this.POS = this.POST;\n    }\n  }\n  Tag.prototype.toString = function() {\n    return (this.stat.join(',') + ' ' + this.flex.join(',')).trim();\n  }\n  // Проверяет согласованность с конкретными значениями граммем либо со списком граммем из другого тега (или слова)\n  // tag.matches({ 'POS' : 'NOUN', 'GNdr': ['masc', 'neut'] })\n  //   Ключи — названия граммем, значения — дочерние граммемы, массивы граммем, либо true/false\n  // tag.matches(otherTag, ['POS', 'GNdr'])\n  //   Тег (или слово) + список граммем, значения которых у этих двух тегов должны совпадать\n  Tag.prototype.matches = function(tag, grammemes) {\n    if (!grammemes) {\n      // Match to map\n      for (var k in tag) {\n        if (Object.prototype.toString.call(tag[k]) === '[object Array]') {\n          if (!tag[k].indexOf(this[k])) {\n            return false;\n          }\n        } else {\n          if (tag[k] != this[k]) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n\n    if (tag instanceof Word) {\n      tag = tag.tag;\n    }\n\n    // Match to another tag\n    for (var i = 0; i < grammemes.length; i++) {\n      if (tag[grammemes[i]] != this[grammemes[i]]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  var Word = function(val, paradigmIdx, formIdx, stutterCnt, typosCnt) {\n    this.val = val;\n    this.paradigmIdx = paradigmIdx;\n    this.paradigm = paradigms[paradigmIdx];\n    var len = this.paradigm.length / 3;\n    this.formIdx = formIdx;\n    this.tag = tags[this.paradigm[len + formIdx]];\n    this.stutterCnt = stutterCnt;\n    this.typosCnt = typosCnt;\n  }\n  // Возвращает основу слова\n  Word.prototype.base = function() {\n    if (this._base) {\n      return this._base;\n    }\n    var len = this.paradigm.length / 3;\n    return this._base = this.val.substring(prefixes[this.paradigm[(len << 1) + this.formIdx]].length, this.val.length - suffixes[this.paradigm[this.formIdx]].length);\n  }\n  // Приводит к начальной форме. Аргумент keepPOS=true нужен, если требуется не менять часть речи при нормализации (например, не делать из причастия инфинитив).\n  // TODO: некоторые смены частей речи, возможно, стоит делать в любом случае (т.к., например, компаративы, краткие формы причастий и прилагательных разделены, инфинитив отделен от глагола)\n  Word.prototype.normalize = function(keepPOS) {\n    return this.inflect(keepPOS ? { POS: this.tag.POS } : 0);\n  }\n  // Склоняет/спрягает слово так, чтобы оно соответствовало граммемам другого слова, тега или просто конкретным граммемам (подробнее см. Tag.prototype.matches).\n  // Всегда выбирается первый подходящий вариант.\n  Word.prototype.inflect = function(tag, grammemes) {\n    var len = this.paradigm.length / 3;\n    if (!grammemes && typeof tag === 'number') {\n      // Inflect to specific formIdx\n      return [prefixes[this.paradigm[(len << 1) + tag]] + this.base() + suffixes[this.paradigm[tag]], tags[this.paradigm[len + tag]]];\n    }\n\n    for (var formIdx = 0; formIdx < len; formIdx++) {\n      if (tags[this.paradigm[len + formIdx]].matches(tag, grammemes)) {\n        return [prefixes[this.paradigm[(len << 1) + formIdx]] + this.base() + suffixes[this.paradigm[formIdx]], tags[this.paradigm[len + formIdx]]];\n      }\n    }\n\n    return false;\n  }\n  // Аналогично Tag.prototype.matches.\n  Word.prototype.matches = function(tag, grammemes) {\n    return this.tag.matches(tag, grammemes);\n  }\n  // Выводит информацию о слове в консоль.\n  Word.prototype.log = function() {\n    var len = this.paradigm.length / 3;\n    console.group(this.val);\n    console.log('Stutter?', this.stutterCnt, 'Typos?', this.typosCnt);\n    console.log(prefixes[this.paradigm[(len << 1) + this.formIdx]] + '|' + this.base() + '|' + suffixes[this.paradigm[this.formIdx]]);\n    console.log(this.tag.ext.toString());\n    var norm = this.normalize();\n    console.log('=> ', norm[0] + ' (' + norm[1].ext.toString() + ')');\n    var norm = this.normalize(true);\n    console.log('=> ', norm[0] + ' (' + norm[1].ext.toString() + ')');\n    console.groupCollapsed('Все формы: ' + len);\n    for (var formIdx = 0; formIdx < len; formIdx++) {\n      var form = this.inflect(formIdx);\n      console.log(form[0] + ' (' + form[1].ext.toString() + ')');\n    }\n    console.groupEnd();\n    console.groupEnd();\n  }\n\n  var Morph = Az.Morph = function(word, config) {\n    config = config || defaults;\n\n    for (var k in defaults) {\n      if (!(k in config)) {\n        config[k] = defaults[k];\n      }\n    }\n\n    var opts;\n    if (config.typos == 'auto') {\n      opts = words.findAll(word, config.replacements, config.stutter, 0);\n      if (!opts.length && word.length > 4) {\n        opts = words.findAll(word, config.replacements, config.stutter, 1);\n        if (!opts.length && word.length > 9) {\n          opts = words.findAll(word, config.replacements, config.stutter, 2);\n        }\n      }\n    } else {\n      opts = words.findAll(word, config.replacements, config.stutter, config.typos);\n    }\n\n    var vars = [];\n    console.log(opts);\n    for (var i = 0; i < opts.length; i++) {\n      for (var j = 0; j < opts[i][1].length; j++) {\n        var word = new Word(opts[i][0], opts[i][1][j][0], opts[i][1][j][1], opts[i][2], opts[i][3]);\n        word.log();\n        vars.push(word);\n      }\n    }\n    return vars;\n  }\n\n  Az.Morph.setDefaults = function(config) {\n    defaults = config;\n  }\n\n  Az.Morph.init = function(path, callback) {\n    var loading = 0;\n    var tagsInt, tagsExt;\n    function loaded() {\n      if (!--loading) {\n        tags = Array(tagsInt.length);\n        for (var i = 0; i < tagsInt.length; i++) {\n          tags[i] = new Tag(tagsInt[i]);\n          tags[i].ext = new Tag(tagsExt[i]);\n        }\n        tags = deepFreeze(tags);\n        callback(Morph);\n      }\n    }\n\n    loading++;\n    Az.DAWG.load(path + '/words.dawg', 'words', function(dawg) {\n      words = dawg;\n      loaded();\n    });\n\n    for (var prefix = 0; prefix < 3; prefix++) {\n      (function(prefix) {\n        loading++;\n        Az.DAWG.load(path + '/prediction-suffixes-' + prefix + '.dawg', 'probs', function(dawg) {\n          predictionSuffixes[prefix] = dawg;\n          loaded();\n        });\n      })(prefix);\n    }\n\n    loading++;\n    Az.DAWG.load(path + '/p_t_given_w.intdawg', 'int', function(dawg) {\n      probabilities = dawg;\n      loaded();\n    });\n\n    loading++;\n    Az.load(path + '/grammemes.json', 'json', function(json) {\n      grammemes = {};\n      for (var i = 0; i < json.length; i++) {\n        grammemes[json[i][0]] = grammemes[json[i][2]] = {\n          parent: json[i][1],\n          internal: json[i][0],\n          external: json[i][2],\n          externalFull: json[i][3]\n        }\n      }\n      loaded();\n    });\n\n    loading++;\n    Az.load(path + '/gramtab-opencorpora-int.json', 'json', function(json) {\n      tagsInt = json;\n      loaded();\n    });\n\n    loading++;\n    Az.load(path + '/gramtab-opencorpora-ext.json', 'json', function(json) {\n      tagsExt = json;\n      loaded();\n    });\n\n    loading++;\n    Az.load(path + '/suffixes.json', 'json', function(json) {\n      suffixes = json;\n      loaded();\n    });\n\n    loading++;\n    Az.load(path + '/paradigms.array', 'arraybuffer', function(data) {\n      var list = new Uint16Array(data),\n          count = list[0],\n          pos = 1;\n\n      paradigms = [];\n      for (var i = 0; i < count; i++) {\n        var size = list[pos++];\n        paradigms.push(list.subarray(pos, pos + size));\n        pos += size;\n      }\n      loaded();\n    });\n  }\n})();","(function() {\n  // TBD: Syntax analyzer\n  var Syntax = Az.Syntax = function() {\n\n  }\n})();","(function() {\n  var TLDs = 'ac|ad|ae|aero|af|ag|ai|al|am|ao|aq|ar|arpa|as|asia|at|au|aw|ax|az|ba|bb|be|bf|bg|bh|bi|biz|bj|bm|bo|br|bs|bt|bv|bw|by|bz|ca|cat|cc|cd|cf|cg|ch|ci|cl|cm|cn|co|com|coop|cr|cu|cv|cw|cx|cz|de|dj|dk|dm|do|dz|ec|edu|ee|eg|es|et|eu|fi|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gov|gp|gq|gr|gs|gt|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|info|int|io|iq|ir|is|it|je|jo|jobs|jp|kg|ki|km|kn|kp|kr|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|me|mg|mh|mil|mk|ml|mn|mo|mobi|mp|mq|mr|ms|mt|mu|museum|mv|mw|mx|my|na|name|nc|ne|net|nf|ng|nl|no|nr|nu|nz|om|org|pa|pe|pf|ph|pk|pl|pm|pn|post|pr|pro|ps|pt|pw|py|qa|re|ro|rs|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|sk|sl|sm|sn|so|sr|st|su|sv|sx|sy|sz|tc|td|tel|tf|tg|th|tj|tk|tl|tm|tn|to|tr|travel|tt|tv|tw|tz|ua|ug|uk|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|yt|امارات|հայ|বাংলা|бел|中国|中國|الجزائر|مصر|ею|გე|ελ|香港|भारत|بھارت|భారత్|ભારત|ਭਾਰਤ|ভারত|இந்தியா|ایران|ايران|عراق|الاردن|한국|қаз|ලංකා|இலங்கை|المغرب|мкд|мон|澳門|澳门|مليسيا|عمان|پاکستان|پاكستان|فلسطين|срб|рф|قطر|السعودية|السعودیة|السعودیۃ|السعوديه|سودان|新加坡|சிங்கப்பூர்|سورية|سوريا|ไทย|تونس|台灣|台湾|臺灣|укр|اليمن|xxx|zm|aaa|aarp|abarth|abb|abbott|abbvie|abc|able|abogado|abudhabi|academy|accenture|accountant|accountants|aco|active|actor|adac|ads|adult|aeg|aetna|afamilycompany|afl|africa|africamagic|agakhan|agency|aig|aigo|airbus|airforce|airtel|akdn|alfaromeo|alibaba|alipay|allfinanz|allstate|ally|alsace|alstom|americanexpress|americanfamily|amex|amfam|amica|amsterdam|analytics|android|anquan|anz|aol|apartments|app|apple|aquarelle|arab|aramco|archi|army|art|arte|asda|associates|athleta|attorney|auction|audi|audible|audio|auspost|author|auto|autos|avianca|aws|axa|azure|baby|baidu|banamex|bananarepublic|band|bank|bar|barcelona|barclaycard|barclays|barefoot|bargains|baseball|basketball|bauhaus|bayern|bbc|bbt|bbva|bcg|bcn|beats|beauty|beer|bentley|berlin|best|bestbuy|bet|bharti|bible|bid|bike|bing|bingo|bio|black|blackfriday|blanco|blockbuster|blog|bloomberg|blue|bms|bmw|bnl|bnpparibas|boats|boehringer|bofa|bom|bond|boo|book|booking|boots|bosch|bostik|boston|bot|boutique|box|bradesco|bridgestone|broadway|broker|brother|brussels|budapest|bugatti|build|builders|business|buy|buzz|bzh|cab|cafe|cal|call|calvinklein|camera|camp|cancerresearch|canon|capetown|capital|capitalone|car|caravan|cards|care|career|careers|cars|cartier|casa|case|caseih|cash|casino|catering|catholic|cba|cbn|cbre|cbs|ceb|center|ceo|cern|cfa|cfd|chanel|channel|chase|chat|cheap|chintai|chloe|christmas|chrome|chrysler|church|cipriani|circle|cisco|citadel|citi|citic|city|cityeats|claims|cleaning|click|clinic|clinique|clothing|cloud|club|clubmed|coach|codes|coffee|college|cologne|comcast|commbank|community|company|compare|computer|comsec|condos|construction|consulting|contact|contractors|cooking|cookingchannel|cool|corsica|country|coupon|coupons|courses|credit|creditcard|creditunion|cricket|crown|crs|cruise|cruises|csc|cuisinella|cymru|cyou|dabur|dad|dance|date|dating|datsun|day|dclk|dds|deal|dealer|deals|degree|delivery|dell|deloitte|delta|democrat|dental|dentist|desi|design|dev|dhl|diamonds|diet|digital|direct|directory|discount|discover|dish|diy|dnp|docs|dodge|dog|doha|domains|dot|download|drive|dstv|dtv|dubai|duck|dunlop|duns|dupont|durban|dvag|dwg|earth|eat|edeka|education|email|emerck|emerson|energy|engineer|engineering|enterprises|epost|epson|equipment|ericsson|erni|esq|estate|esurance|etisalat|eurovision|eus|events|everbank|exchange|expert|exposed|express|extraspace|fage|fail|fairwinds|faith|family|fan|fans|farm|farmers|fashion|fast|fedex|feedback|ferrari|ferrero|fiat|fidelity|fido|film|final|finance|financial|fire|firestone|firmdale|fish|fishing|fit|fitness|flickr|flights|flir|florist|flowers|flsmidth|fly|foo|foodnetwork|football|ford|forex|forsale|forum|foundation|fox|free|fresenius|frl|frogans|frontdoor|frontier|ftr|fujitsu|fujixerox|fun|fund|furniture|futbol|fyi|gal|gallery|gallo|gallup|game|games|gap|garden|gbiz|gdn|gea|gent|genting|george|ggee|gift|gifts|gives|giving|glade|glass|gle|global|globo|gmail|gmbh|gmo|gmx|godaddy|gold|goldpoint|golf|goo|goodhands|goodyear|goog|google|gop|got|gotv|grainger|graphics|gratis|green|gripe|group|guardian|gucci|guge|guide|guitars|guru|hair|hamburg|hangout|haus|hbo|hdfc|hdfcbank|health|healthcare|help|helsinki|here|hermes|hgtv|hiphop|hisamitsu|hitachi|hiv|hkt|hockey|holdings|holiday|homedepot|homegoods|homes|homesense|honda|honeywell|horse|host|hosting|hot|hoteles|hotmail|house|how|hsbc|htc|hughes|hyatt|hyundai|ibm|icbc|ice|icu|ieee|ifm|iinet|ikano|imamat|imdb|immo|immobilien|industries|infiniti|ing|ink|institute|insurance|insure|intel|international|intuit|investments|ipiranga|irish|iselect|ismaili|ist|istanbul|itau|itv|iveco|iwc|jaguar|java|jcb|jcp|jeep|jetzt|jewelry|jio|jlc|jll|jmp|jnj|joburg|jot|joy|jpmorgan|jprs|juegos|juniper|kaufen|kddi|kerryhotels|kerrylogistics|kerryproperties|kfh|kia|kim|kinder|kindle|kitchen|kiwi|koeln|komatsu|kosher|kpmg|kpn|krd|kred|kuokgroup|kyknet|kyoto|lacaixa|ladbrokes|lamborghini|lamer|lancaster|lancia|lancome|land|landrover|lanxess|lasalle|lat|latino|latrobe|law|lawyer|lds|lease|leclerc|lefrak|legal|lego|lexus|lgbt|liaison|lidl|life|lifeinsurance|lifestyle|lighting|like|lilly|limited|limo|lincoln|linde|link|lipsy|live|living|lixil|loan|loans|locker|locus|loft|lol|london|lotte|lotto|love|lpl|lplfinancial|ltd|ltda|lundbeck|lupin|luxe|luxury|macys|madrid|maif|maison|makeup|man|management|mango|market|marketing|markets|marriott|marshalls|maserati|mattel|mba|mcd|mcdonalds|mckinsey|med|media|meet|melbourne|meme|memorial|men|menu|meo|metlife|miami|microsoft|mini|mint|mit|mitsubishi|mlb|mls|mma|mnet|mobily|moda|moe|moi|mom|monash|money|monster|montblanc|mopar|mormon|mortgage|moscow|moto|motorcycles|mov|movie|movistar|msd|mtn|mtpc|mtr|multichoice|mutual|mutuelle|mzansimagic|nab|nadex|nagoya|naspers|nationwide|natura|navy|nba|nec|netbank|netflix|network|neustar|new|newholland|news|next|nextdirect|nexus|nfl|ngo|nhk|nico|nike|nikon|ninja|nissan|nissay|nokia|northwesternmutual|norton|now|nowruz|nowtv|nra|nrw|ntt|nyc|obi|observer|off|office|okinawa|olayan|olayangroup|oldnavy|ollo|omega|one|ong|onl|online|onyourside|ooo|open|oracle|orange|organic|orientexpress|origins|osaka|otsuka|ott|ovh|page|pamperedchef|panasonic|panerai|paris|pars|partners|parts|party|passagens|pay|payu|pccw|pet|pfizer|pharmacy|philips|photo|photography|photos|physio|piaget|pics|pictet|pictures|pid|pin|ping|pink|pioneer|pizza|place|play|playstation|plumbing|plus|pnc|pohl|poker|politie|porn|pramerica|praxi|press|prime|prod|productions|prof|progressive|promo|properties|property|protection|pru|prudential|pub|pwc|qpon|quebec|quest|qvc|racing|raid|read|realestate|realtor|realty|recipes|red|redstone|redumbrella|rehab|reise|reisen|reit|reliance|ren|rent|rentals|repair|report|republican|rest|restaurant|review|reviews|rexroth|rich|richardli|ricoh|rightathome|ril|rio|rip|rmit|rocher|rocks|rodeo|rogers|room|rsvp|ruhr|run|rwe|ryukyu|saarland|safe|safety|sakura|sale|salon|samsclub|samsung|sandvik|sandvikcoromant|sanofi|sap|sapo|sarl|sas|save|saxo|sbi|sbs|sca|scb|schaeffler|schmidt|scholarships|school|schule|schwarz|science|scjohnson|scor|scot|seat|secure|security|seek|select|sener|services|ses|seven|sew|sex|sexy|sfr|shangrila|sharp|shaw|shell|shia|shiksha|shoes|shopping|shouji|show|showtime|shriram|silk|sina|singles|site|ski|skin|sky|skype|sling|smart|smile|sncf|soccer|social|softbank|software|sohu|solar|solutions|song|sony|soy|space|spiegel|spot|spreadbetting|srl|srt|stada|staples|star|starhub|statebank|statefarm|statoil|stc|stcgroup|stockholm|storage|store|stream|studio|study|style|sucks|supersport|supplies|supply|support|surf|surgery|suzuki|swatch|swiftcover|swiss|sydney|symantec|systems|tab|taipei|talk|taobao|target|tatamotors|tatar|tattoo|tax|taxi|tci|tdk|team|tech|technology|telecity|telefonica|temasek|tennis|teva|thd|theater|theatre|theguardian|tiaa|tickets|tienda|tiffany|tips|tires|tirol|tjmaxx|tjx|tkmaxx|tmall|today|tokyo|tools|top|toray|toshiba|total|tours|town|toyota|toys|trade|trading|training|travelchannel|travelers|travelersinsurance|trust|trv|tube|tui|tunes|tushu|tvs|ubank|ubs|uconnect|unicom|university|uno|uol|ups|vacations|vana|vanguard|vegas|ventures|verisign|versicherung|vet|viajes|video|vig|viking|villas|vin|vip|virgin|visa|vision|vista|vistaprint|viva|vivo|vlaanderen|vodka|volkswagen|volvo|vote|voting|voto|voyage|vuelos|wales|walmart|walter|wang|wanggou|warman|watch|watches|weather|weatherchannel|webcam|weber|website|wed|wedding|weibo|weir|whoswho|wien|wiki|williamhill|win|windows|wine|winners|wme|wolterskluwer|woodside|work|works|world|wow|wtc|wtf|xbox|xerox|xfinity|xihuan|xin|कॉम|セール|佛山|慈善|集团|在线|大众汽车|点看|คอม|八卦|موقع|一号店|公益|公司|香格里拉|网站|移动|我爱你|москва|католик|онлайн|сайт|联通|קום|时尚|微博|淡马锡|ファッション|орг|नेट|ストア|삼성|商标|商店|商城|дети|ポイント|新闻|工行|家電|كوم|中文网|中信|娱乐|谷歌|電訊盈科|购物|クラウド|通販|网店|संगठन|餐厅|网络|ком|诺基亚|食品|飞利浦|手表|手机|ارامكو|العليان|اتصالات|بازار|موبايلي|ابوظبي|كاثوليك|همراه|닷컴|政府|شبكة|بيتك|عرب|机构|组织机构|健康|рус|珠宝|大拿|みんな|グーグル|世界|書籍|网址|닷넷|コム|天主教|游戏|vermögensberater|vermögensberatung|企业|信息|嘉里大酒店|嘉里|广东|政务|xperia|xyz|yachts|yahoo|yamaxun|yandex|yodobashi|yoga|yokohama|you|youtube|yun|zappos|zara|zero|zip|zippo|zone|zuerich'.split('|');\n  var defaults = {\n    hashtags: true,\n    emails: true,\n    links: {\n      protocols: true,\n      www: true,\n      tlds: {}\n    }\n  };\n\n  for (var i = 0; i < TLDs.length; i++) {\n    defaults.links.tlds[TLDs[i]] = true;\n  }\n\n  // Start splitting text into tokens\n  // Returns a context, use `done` method to retrieve result\n  var Tokens = Az.Tokens = function(text, config) {\n    if (this instanceof Tokens) {\n      this.tokens = [];\n      this.config = config || defaults;\n      this.append(text);\n      this.index = -1;\n    } else {\n      return new Tokens(text);\n    }\n  }\n\n  // Adds more text content\n  Tokens.prototype.append = function(text, config) {\n    config = config || this.config;\n    for (var i = 0; i < text.length; i++) {\n      var ch = text.charAt(i);\n      var code = text.charCodeAt(i);\n\n      var charType = 'OTHER';\n      var charUpper = (ch.toLocaleLowerCase() == ch);\n      if (code >= 0x0400 && code <= 0x04FF) charType = 'CYRIL';\n      if ((code >= 0x0041 && code <= 0x005A) || (code >= 0x0061 && code <= 0x007A) || (code >= 0x00C0 && code <= 0x024F)) charType = 'LATIN';\n      if (code >= 0x0030 && code <= 0x0039) charType = 'DIGIT';\n      if ((code <= 0x0020) || (code >= 0x0080 && code <= 0x00A0)) charType = 'SPACE';\n      if ('-–—.…,:;?!()[]«»\"'.indexOf(ch) > -1) charType = 'PUNCT';\n\n      var tokenType = charType;\n      var tokenSubType = false;\n      if (charType == 'CYRIL' || charType == 'LATIN') {\n        tokenType = 'WORD';\n        tokenSubType = charType;\n      } else\n      if (charType == 'DIGIT') {\n        tokenType = 'NUMBER';\n      }\n\n      var append = false;\n      var last = this.tokens.length - 1;\n      var token = this.tokens[last];\n      if (token) {\n        // Preprocess last token\n        if (config.links && config.links.tlds &&\n            this.tokens.length > 2 &&\n            this.tokens[last - 2].type == 'WORD' &&\n            this.tokens[last - 1].s == '.' &&\n            this.tokens[last].type == 'WORD' &&\n            this.tokens[last].s in config.links.tlds) {\n\n          // Merge all subdomains\n          while (last >= 2 &&\n                 this.tokens[last - 2].type == 'WORD' &&\n                 (this.tokens[last - 1].s == '.' || this.tokens[last - 1].s == '@' || this.tokens[last - 1].s == ':')) {\n            last -= 2;\n            token = this.tokens[last];\n            token.s += this.tokens[last + 1].s + this.tokens[last + 2].s;\n            token.allUpper = token.allUpper && this.tokens[last + 1].allUpper && this.tokens[last + 2].allUpper;\n          }\n\n          token.type = 'LINK';\n          this.tokens.length = last + 1;\n        }\n\n        // Process next char (start new token or append to the previous one)\n        if (token.type == 'LINK') {\n          if (charType != 'SPACE' && ch != ',') {\n            append = true;\n          }\n        } else\n        if (token.type == 'HASHTAG') {\n          if (charType == 'CYRIL' || charType == 'LATIN' || charType == 'DIGIT' || ch == '_' || ch == '@') {\n            append = true;\n          }\n        } else\n        if (charType == 'CYRIL' || charType == 'LATIN') {\n          if (token.type == 'WORD') {\n            append = true;\n            token.subType = (token.subType == charType) ? token.subType : 'MIXED';\n          } else\n          if (token.type == 'NUMBER') { // Digits + ending\n            append = true;\n            token.subType = (token.subType && token.subType != charType) ? 'MIXED' : charType;\n          } else\n          if (config.hashtags && token.s == '#') { // Hashtags\n            append = true;\n            token.type = 'HASHTAG';\n          }\n        } else\n        if (charType == 'DIGIT') {\n          if (token.type == 'WORD') {\n            append = true;\n            token.subType = 'MIXED';\n          } else\n          if (token.type == 'NUMBER') {\n            append = true;\n          } else\n          if (token.s == '+' || token.s == '-') {\n            append = true;\n            token.type = 'NUMBER';\n          } else\n          if ((token.s == ',' || token.s == '.') && this.tokens.length > 1 && this.tokens[last - 1].type == 'NUMBER') {\n            append = true;\n\n            token = this.tokens[last - 1];\n            token.s += this.tokens[last].s;\n\n            this.tokens.length -= 1;\n          }\n        } else\n        if (charType == 'SPACE') {\n          if (token.type == 'SPACE') {\n            append = true;\n          }\n        } else\n        if (ch == '.') {\n          if (config.links && config.links.www && token.s.toLocaleLowerCase() == 'www') { // Links without protocol but with www\n            append = true;\n            token.type = 'LINK';\n          }\n        } else\n        if (ch == '/') {\n          if (config.links && config.links.protocols &&\n              this.tokens.length > 2 &&\n              this.tokens[last - 2].type == 'WORD' &&\n              this.tokens[last - 2].subType == 'LATIN' &&\n              this.tokens[last - 1].s == ':' &&\n              this.tokens[last].s == '/') { // Links (with protocols)\n            append = true;\n\n            token = this.tokens[last - 2];\n            token.s += this.tokens[last - 1].s + this.tokens[last].s;\n            token.allUpper = token.allUpper && this.tokens[last - 1].allUpper && this.tokens[last].allUpper;\n            token.type = 'LINK';\n\n            this.tokens.length -= 2;\n          }\n        }\n      }\n\n      if (append) {\n        token.s += ch;\n      } else {\n        token = {\n          type: tokenType,\n          s: ch,\n          st: i,\n\n          firstUpper: charUpper,\n          allUpper: charUpper,\n        }\n        if (tokenSubType) {\n          token.subType = tokenSubType;\n        }\n        this.tokens.push(token);\n      }\n      token.en = i;\n      token.length = (token.en - token.st) + 1;\n      token.allUpper = token.allUpper && charUpper;\n    }\n    return this;\n  }\n\n  Tokens.prototype.done = function(filter, exclude) {\n    // Finalize tokenizing, return list of tokens\n    // For now it just returns tokens, in the future there could be some additional work\n    if (!filter) {\n      return this.tokens;\n    }\n    var list = [];\n    for (var i = 0; i < this.tokens.length; i++) {\n      if ((filter.indexOf(this.tokens[i].type) == -1) == exclude) {\n        list.push(this.tokens[i]);\n      }\n    }\n    return list;\n  }\n\n  Tokens.prototype.countTokens = function(filter, exclude) {\n    if (!skipSpace && !skipPunct) {\n      return this.tokens.length;\n    }\n    var count = 0;\n    for (var i = 0; i < this.tokens.length; i++) {\n      if ((filter.indexOf(this.tokens[i].type) == -1) == exclude) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n  Tokens.prototype.nextToken = function(moveIndex, filter, exclude) {\n    var index = this.index;\n    index++;\n    while (index < this.tokens.length && filter && (filter.indexOf(this.tokens[index].type) != -1) == exclude) {\n      index++;\n    }\n    if (index < this.tokens.length) {\n      if (moveIndex) {\n        this.index = index;\n      }\n      return this.tokens[index];\n    }\n    return null;\n  }\n\n  Tokens.prototype.punctAhead = function() {\n    var token = this.nextToken(false, ['SPACE'], true);\n    return token && token.type == 'PUNCT' && token;\n  }\n\n  Tokens.prototype.prevToken = function(moveIndex, filter, exclude) {\n    var index = this.index;\n    index--;\n    while (index >= 0 && filter && (filter.indexOf(this.tokens[index].type) != -1) == exclude) {\n      index--;\n    }\n    if (index >= 0) {\n      if (moveIndex) {\n        this.index = index;\n      }\n      return this.tokens[index];\n    }\n    return null;\n  }\n\n  Tokens.prototype.punctBehind = function() {\n    var token = this.prevToken(false, ['SPACE'], true);\n    return token && token.type == 'PUNCT' && token;\n  }\n\n  Tokens.prototype.hasTokensAhead = function(filter, exclude) {\n    return this.nextToken(false, filter, exclude) != null;\n  }\n\n  Tokens.prototype.hasTokensBehind = function(filter, exclude) {\n    return this.prevToken(false, filter, exclude) != null;\n  }\n})();"]}